exit
comments
comments = comments.select { |c| c['created_at'] >= 1.day.ago }
comments[0]['created_at'] >= 1.day.ago
comments[0]['created_at'] == 1.day.ago
comments[0]['created_at'] = "2021-02-25T03:17:13Z"
comments[0]['created_at'] = "    url = URI("https://app.orbit.love/api/v1/#{ENV['ORBIT_WORKSPACE_ID']}/activities")
comments[0]['created_at'] = 1.day.ago
comments
comments = comments.delete_if { |c| c['created_at'] >= 1.day.ago }
comments
comments[0]['created_at'] > 1.day.ago
comments[0]['created_at']
c['created_at']
comments.delete_if { |c| c['created_at'] >= 1.day.ago }
s
n
s
n
c
comments.delete_if { |c| c['created_at'] >= 1.day.ago }
comments.delete_if { |c| c['created_at'] <= 1.day.ago }
comments.delete_if { |c| c['created_at'] >= 1.day.ago }
s
n
response.body
n
url
n
s
n
exit
url
n
s
n
exit
n
s
n
s
c
comments
s
n
s
n
c
n
article['id']
s
n
response.body
n
url
n
s
exit
request.body
request.inspect
request.path
request.methods
request
request.query
request.uri
response.body
n
request.body
request
n
s
exit
response.body
n
id
n
s
article['id']
s
articles
exit
comments
exit
@ids
exit
response
exit
resp.map(&:keys&:to_sym)
resp.map(&:to_sym)
resp[0].keys[0].to_sym
resp[0].keys[0]
resp[0].keys.to_sym
resp[0].keys
resp[0]
resp.keys
resp
resp.map(&:id)
@ids[1]
@ids[2]
@ids[0]
@ids[1]
@ids.class
@ids
@ids << resp.map { |r| r['id'] }
@ids
@ids << resp.each { |r| r['id'] }
@ids << resp.each { |r| r.id }
@ids << resp.each { |r| r.id |
@ids = []
resp[0]
resp
resp.each(&'id')
resp.each(&:id)
response.each(&:id))
response.each(&'id')
resp[0][:id]
resp[0]['id']
resp[0]['id
resp[0]
resp = JSON.parse(response.body)
response.body[0]
response.body
exit
response.body
request.body
@username
exit
@username
username
request.body
exit
@dev_username
client
client.username
@username
request.body
request
response.body
